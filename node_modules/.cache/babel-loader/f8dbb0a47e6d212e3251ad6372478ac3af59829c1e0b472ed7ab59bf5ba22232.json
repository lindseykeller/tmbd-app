{"ast":null,"code":"var _jsxFileName = \"/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"axios\";\n\n// const ModalContent = ({ id, onClose }) => {\n//   const [videoId, setVideoId] = useState(\"\");\n//   // const [youTubeLink, setYouTubeLink] = useState(\"\");\n//   const closeButtonRef = useRef(null); // Ref for the close button\n//   const modalRef = useRef(null); // Ref for the modal container\n\n//   const opts = {\n//     height: \"390\",\n//     width: \"840\",\n\n//     playerVars: {\n//       // https://developers.google.com/youtube/player_parameters\n//       autoplay: 1,\n//     },\n//   };\n\n//   const styles = {\n//     position: \"fixed\",\n\n//     right: \"0\",\n//     bottom: \"0\",\n//     top: \"20%\",\n//     left: \"23%\",\n//   };\n\n//   const fetchVideo = async () => {\n//     const { data } = await axios.get(\n//       `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}`\n//     );\n//     console.log(data);\n//     setVideoId(data?.results[0]?.key);\n//   };\n//   useEffect(() => {\n//     fetchVideo();\n//   }, []);\n//   useEffect(() => {\n//     // Focus the close button when the modal opens\n//     if (closeButtonRef.current) {\n//       closeButtonRef.current.focus();\n//     }\n\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         onClose();\n//       }\n\n//       // Handle Tab key to trap focus within the modal\n//       if (event.key === \"Tab\") {\n//         if (!modalRef.current) return; // Check if modalRef is available\n//         const focusableElements = modalRef.current.querySelectorAll(\n//           'button, [href], input, [tabindex]:not([tabindex=\"-1\"])'\n//         );\n//         const firstElement = focusableElements[0];\n//         const lastElement = focusableElements[focusableElements.length - 1];\n\n//         if (event.shiftKey) {\n//           // Shift + Tab\n//           if (document.activeElement === firstElement) {\n//             event.preventDefault();\n//             closeButtonRef.current.focus(); // Focus on the close button\n//           }\n//         } else {\n//           // Tab\n//           if (document.activeElement === lastElement) {\n//             event.preventDefault();\n//             closeButtonRef.current.focus(); // Focus on the close button\n//           } else if (document.activeElement === closeButtonRef.current) {\n//             event.preventDefault();\n//             firstElement.focus(); // Loop back to the first focusable element\n//           }\n//         }\n//       }\n//     };\n\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [onClose]);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = ({\n  id,\n  onClose\n}) => {\n  _s();\n  const [videoId, setVideoId] = useState(\"\");\n  const closeButtonRef = useRef(null);\n  const modalRef = useRef(null);\n  const opts = {\n    height: \"390\",\n    width: \"840\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const fetchVideo = async () => {\n    var _data$results$;\n    const {\n      data\n    } = await axios.get(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}`);\n    setVideoId(data === null || data === void 0 ? void 0 : (_data$results$ = data.results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.key);\n  };\n  useEffect(() => {\n    fetchVideo();\n  }, [id]);\n  useEffect(() => {\n    // Set focus to the iframe's play/pause button or first focusable element within the iframe\n    const handleKeyDown = event => {\n      if (event.key === \"Escape\") {\n        onClose();\n      }\n\n      // Handle Tab key to trap focus within the modal\n      if (event.key === \"Tab\") {\n        if (!modalRef.current) return;\n        const focusableElements = modalRef.current.querySelectorAll('button, [href], input, [tabindex]:not([tabindex=\"-1\"])');\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n        if (event.shiftKey) {\n          // Shift + Tab\n          if (document.activeElement === firstElement) {\n            event.preventDefault();\n            lastElement.focus(); // Loop to the last element\n          }\n        } else {\n          // Tab\n          if (document.activeElement === lastElement) {\n            event.preventDefault();\n            closeButtonRef.current.focus(); // Focus on the close button\n          } else if (document.activeElement === closeButtonRef.current) {\n            event.preventDefault();\n            firstElement.focus(); // Loop back to the first focusable element\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [onClose]);\n  useEffect(() => {\n    fetchVideo();\n  }, [id]);\n  const styles = {\n    position: \"fixed\",\n    right: \"0\",\n    bottom: \"0\",\n    top: \"20%\",\n    left: \"23%\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      ref: closeButtonRef,\n      onClick: onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: videoId,\n      opts: opts\n      // Attach the ref to the YouTube component\n      //tabIndex=\"0\" // Make the YouTube frame focusable\n      ,\n\n      style: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(ModalContent, \"Mnr5AKA9dcXSiPVJUjOGM0WlVOw=\");\n_c = ModalContent;\nexport default ModalContent;\nvar _c;\n$RefreshReg$(_c, \"ModalContent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YouTube","axios","jsxDEV","_jsxDEV","ModalContent","id","onClose","_s","videoId","setVideoId","closeButtonRef","modalRef","opts","height","width","playerVars","autoplay","fetchVideo","_data$results$","data","get","process","env","REACT_APP_MOVIE_KEY","results","key","handleKeyDown","event","current","focusableElements","querySelectorAll","firstElement","lastElement","length","shiftKey","document","activeElement","preventDefault","focus","window","addEventListener","removeEventListener","styles","position","right","bottom","top","left","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"axios\";\n\n// const ModalContent = ({ id, onClose }) => {\n//   const [videoId, setVideoId] = useState(\"\");\n//   // const [youTubeLink, setYouTubeLink] = useState(\"\");\n//   const closeButtonRef = useRef(null); // Ref for the close button\n//   const modalRef = useRef(null); // Ref for the modal container\n\n//   const opts = {\n//     height: \"390\",\n//     width: \"840\",\n\n//     playerVars: {\n//       // https://developers.google.com/youtube/player_parameters\n//       autoplay: 1,\n//     },\n//   };\n\n//   const styles = {\n//     position: \"fixed\",\n\n//     right: \"0\",\n//     bottom: \"0\",\n//     top: \"20%\",\n//     left: \"23%\",\n//   };\n\n//   const fetchVideo = async () => {\n//     const { data } = await axios.get(\n//       `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}`\n//     );\n//     console.log(data);\n//     setVideoId(data?.results[0]?.key);\n//   };\n//   useEffect(() => {\n//     fetchVideo();\n//   }, []);\n//   useEffect(() => {\n//     // Focus the close button when the modal opens\n//     if (closeButtonRef.current) {\n//       closeButtonRef.current.focus();\n//     }\n\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         onClose();\n//       }\n\n//       // Handle Tab key to trap focus within the modal\n//       if (event.key === \"Tab\") {\n//         if (!modalRef.current) return; // Check if modalRef is available\n//         const focusableElements = modalRef.current.querySelectorAll(\n//           'button, [href], input, [tabindex]:not([tabindex=\"-1\"])'\n//         );\n//         const firstElement = focusableElements[0];\n//         const lastElement = focusableElements[focusableElements.length - 1];\n\n//         if (event.shiftKey) {\n//           // Shift + Tab\n//           if (document.activeElement === firstElement) {\n//             event.preventDefault();\n//             closeButtonRef.current.focus(); // Focus on the close button\n//           }\n//         } else {\n//           // Tab\n//           if (document.activeElement === lastElement) {\n//             event.preventDefault();\n//             closeButtonRef.current.focus(); // Focus on the close button\n//           } else if (document.activeElement === closeButtonRef.current) {\n//             event.preventDefault();\n//             firstElement.focus(); // Loop back to the first focusable element\n//           }\n//         }\n//       }\n//     };\n\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [onClose]);\nconst ModalContent = ({ id, onClose }) => {\n  const [videoId, setVideoId] = useState(\"\");\n  const closeButtonRef = useRef(null);\n  const modalRef = useRef(null);\n\n  const opts = {\n    height: \"390\",\n    width: \"840\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const fetchVideo = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}`\n    );\n    setVideoId(data?.results[0]?.key);\n  };\n\n  useEffect(() => {\n    fetchVideo();\n  }, [id]);\n\n  useEffect(() => {\n    // Set focus to the iframe's play/pause button or first focusable element within the iframe\n    const handleKeyDown = (event) => {\n      if (event.key === \"Escape\") {\n        onClose();\n      }\n\n      // Handle Tab key to trap focus within the modal\n      if (event.key === \"Tab\") {\n        if (!modalRef.current) return;\n\n        const focusableElements = modalRef.current.querySelectorAll(\n          'button, [href], input, [tabindex]:not([tabindex=\"-1\"])'\n        );\n\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        if (event.shiftKey) {\n          // Shift + Tab\n          if (document.activeElement === firstElement) {\n            event.preventDefault();\n            lastElement.focus(); // Loop to the last element\n          }\n        } else {\n          // Tab\n          if (document.activeElement === lastElement) {\n            event.preventDefault();\n            closeButtonRef.current.focus(); // Focus on the close button\n          } else if (document.activeElement === closeButtonRef.current) {\n            event.preventDefault();\n            firstElement.focus(); // Loop back to the first focusable element\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [onClose]);\n\n  useEffect(() => {\n    fetchVideo();\n  }, [id]);\n\n  const styles = {\n    position: \"fixed\",\n    right: \"0\",\n    bottom: \"0\",\n    top: \"20%\",\n    left: \"23%\",\n  };\n\n  return (\n    <div>\n        <button ref={closeButtonRef} onClick={onClose}>Close</button> {/* Close Button */}\n      <YouTube \n      videoId={videoId}\n       opts={opts}\n       // Attach the ref to the YouTube component\n        //tabIndex=\"0\" // Make the YouTube frame focusable\n      \n      style={styles}  />;\n    </div>\n  );\n};\n\nexport default ModalContent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}