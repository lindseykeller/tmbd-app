{"ast":null,"code":"var _jsxFileName = \"/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\nimport axios from \"axios\"; // Import axios for making HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = ({\n  id,\n  onClose\n}) => {\n  _s();\n  const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n  const closeButtonRef = useRef(null); // Create a ref for the close button\n  const trapRef = useRef(null); // Create a ref for the focus trap container\n\n  const fetchVideo = async () => {\n    var _data$results$;\n    // Function to fetch video data from API\n    const {\n      data\n    } = await axios.get(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n    );\n\n    setVideoId(data === null || data === void 0 ? void 0 : (_data$results$ = data.results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.key); // Set the video ID from the API response\n  };\n\n  useEffect(() => {\n    // Effect to fetch video when component mounts\n    fetchVideo(); // Call the fetchVideo function\n  }, []); // Empty dependency array means it runs once when the component mounts\n\n  useEffect(() => {\n    const focusableElements = trapRef.current.querySelectorAll('button, [href], input, [tabindex]:not([tabindex=\"-1\"])');\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n    const handleTab = event => {\n      if (event.key === 'Tab') {\n        if (event.shiftKey) {\n          // Shift + Tab\n          if (document.activeElement === firstElement) {\n            event.preventDefault(); // Prevent the default tab action\n            lastElement.focus(); // Move focus to the last element\n          }\n        } else {\n          // Tab\n          if (document.activeElement === lastElement) {\n            event.preventDefault(); // Prevent the default tab action\n            firstElement.focus(); // Move focus to the first element\n          }\n        }\n      }\n    };\n\n    // Ensure trapRef.current is not null before adding the event listener\n    if (trapRef.current) {\n      trapRef.current.addEventListener('keydown', handleTab);\n    }\n\n    // Focus the close button when the component mounts\n    closeButtonRef.current.focus();\n\n    // Cleanup function to remove the event listener\n    return () => {\n      if (trapRef.current) {\n        trapRef.current.removeEventListener('keydown', handleTab);\n      }\n    };\n  }, []);\n  return (\n    /*#__PURE__*/\n    // Render the component\n    _jsxDEV(\"div\", {\n      ref: trapRef,\n      tabIndex: \"-1\",\n      style: {\n        outline: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        width: \"840\" // Set iframe width\n        ,\n        height: \"390\" // Set iframe height\n        ,\n        src: `https://www.youtube.com/embed/${videoId}?autoplay=1` // Embed YouTube video with autoplay\n        ,\n        title: \"YouTube Video\" // Title for the iframe\n        ,\n\n        allow: \"autoplay; encrypted-media\" // Allow autoplay and encrypted media\n        ,\n        allowFullScreen: true // Allow fullscreen mode\n        ,\n        tabIndex: \"0\" // Make the iframe focusable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: closeButtonRef,\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ModalContent, \"PuVRCPEnLGJ5MVrTWdhKvszxDhA=\");\n_c = ModalContent;\nexport default ModalContent;\n\n// Export the ModalContent component\n// import React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\n// import YouTube from \"react-youtube\"; // Import YouTube component for video playback\n// import axios from \"axios\"; // Import axios for making HTTP requests\n\n// const ModalContent = ({ id, onClose }) => { // Define ModalContent component with props\n//   const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n//   const closeButtonRef = useRef(null); // Create a ref for the close button\n\n//   const opts = { // Define options for the YouTube player\n//     height: \"390\", // Set player height\n//     width: \"840\", // Set player width\n//     playerVars: { // YouTube player parameters\n//       autoplay: 1, // Enable autoplay for the video\n//     },\n//   };\n\n//   const styles = { // Define styles for the modal\n//     position: \"fixed\", // Fixed position for the modal\n//     right: \"0\", // Align to the right\n//     bottom: \"0\", // Align to the bottom\n//     top: \"20%\", // Set top position\n//     left: \"23%\", // Set left position\n//   };\n\n//   const fetchVideo = async () => { // Function to fetch video data from API\n//     const { data } = await axios.get( // Make GET request to fetch video data\n//       `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n//     );\n//     console.log(data); // Log fetched data for debugging\n//     setVideoId(data?.results[0]?.key); // Set the video ID from the API response\n//   };\n\n//   useEffect(() => { // Effect to fetch video when component mounts\n//     fetchVideo(); // Call the fetchVideo function\n//   }, []); // Empty dependency array means it runs once when the component mounts\n\n//   useEffect(() => { // Effect to handle focus and keyboard navigation\n//     // Focus the close button when the modal opens\n//     if (closeButtonRef.current) { // Check if close button ref is set\n//       closeButtonRef.current.focus(); // Focus the close button\n//     }\n\n//     const handleKeyDown = (event) => { // Function to handle keydown events\n//       if (event.key === \"Escape\") { // Check if Escape key is pressed\n//         onClose(); // Call onClose function to close the modal\n//       }\n\n//       // Prevent focus from moving away from the close button\n//       if (event.key === \"Tab\") { // Check if Tab key is pressed\n//         event.preventDefault(); // Prevent the default Tab behavior\n//       }\n//     };\n\n//     window.addEventListener(\"keydown\", handleKeyDown); // Attach keydown event listener to the window\n//     return () => { // Cleanup function\n//       window.removeEventListener(\"keydown\", handleKeyDown); // Remove event listener on unmount\n//     };\n//   }, [onClose]); // Dependency on onClose function\n\n//   return ( // Render the component\n//     <div> {/* Modal container */}\n//       <button ref={closeButtonRef} onClick={onClose} tabIndex=\"0\">Close</button> {/* Close Button */}\n//       <YouTube \n//         videoId={videoId} // Pass video ID to YouTube component\n//         opts={opts} // Pass options for the YouTube player\n//         style={styles} // Apply styles to the YouTube component\n//       />\n//     </div>\n//   );\n// };\n\n// export default ModalContent; // Export the ModalContent component\nvar _c;\n$RefreshReg$(_c, \"ModalContent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ModalContent","id","onClose","_s","videoId","setVideoId","closeButtonRef","trapRef","fetchVideo","_data$results$","data","get","process","env","REACT_APP_MOVIE_KEY","results","key","focusableElements","current","querySelectorAll","firstElement","lastElement","length","handleTab","event","shiftKey","document","activeElement","preventDefault","focus","addEventListener","removeEventListener","ref","tabIndex","style","outline","children","width","height","src","title","allow","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\nimport axios from \"axios\"; // Import axios for making HTTP requests\n\nconst ModalContent = ({ id, onClose }) => {\n  const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n  const closeButtonRef = useRef(null); // Create a ref for the close button\n  const trapRef = useRef(null); // Create a ref for the focus trap container\n\n  const fetchVideo = async () => { // Function to fetch video data from API\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n    );\n    setVideoId(data?.results[0]?.key); // Set the video ID from the API response\n  };\n\n  useEffect(() => { // Effect to fetch video when component mounts\n    fetchVideo(); // Call the fetchVideo function\n  }, []); // Empty dependency array means it runs once when the component mounts\n\n  useEffect(() => {\n    const focusableElements = trapRef.current.querySelectorAll('button, [href], input, [tabindex]:not([tabindex=\"-1\"])');\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n  \n    const handleTab = (event) => {\n      if (event.key === 'Tab') {\n        if (event.shiftKey) { // Shift + Tab\n          if (document.activeElement === firstElement) {\n            event.preventDefault(); // Prevent the default tab action\n            lastElement.focus(); // Move focus to the last element\n          }\n        } else { // Tab\n          if (document.activeElement === lastElement) {\n            event.preventDefault(); // Prevent the default tab action\n            firstElement.focus(); // Move focus to the first element\n          }\n        }\n      }\n    };\n  \n    // Ensure trapRef.current is not null before adding the event listener\n    if (trapRef.current) {\n      trapRef.current.addEventListener('keydown', handleTab);\n    }\n  \n    // Focus the close button when the component mounts\n    closeButtonRef.current.focus();\n  \n    // Cleanup function to remove the event listener\n    return () => {\n      if (trapRef.current) {\n        trapRef.current.removeEventListener('keydown', handleTab);\n      }\n    };\n  }, []);\n  \n  return ( // Render the component\n    <div ref={trapRef} tabIndex=\"-1\" style={{ outline: 'none' }}>\n      <iframe\n        width=\"840\" // Set iframe width\n        height=\"390\" // Set iframe height\n        src={`https://www.youtube.com/embed/${videoId}?autoplay=1`} // Embed YouTube video with autoplay\n        title=\"YouTube Video\" // Title for the iframe\n   \n        allow=\"autoplay; encrypted-media\" // Allow autoplay and encrypted media\n        allowFullScreen // Allow fullscreen mode\n        tabIndex=\"0\" // Make the iframe focusable\n      ></iframe>\n    \n      <button ref={closeButtonRef} onClick={onClose}>Close</button> {/* Button to close the modal */}\n    </div>\n  );\n};\n\nexport default ModalContent;\n\n // Export the ModalContent component\n// import React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\n// import YouTube from \"react-youtube\"; // Import YouTube component for video playback\n// import axios from \"axios\"; // Import axios for making HTTP requests\n\n// const ModalContent = ({ id, onClose }) => { // Define ModalContent component with props\n//   const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n//   const closeButtonRef = useRef(null); // Create a ref for the close button\n\n//   const opts = { // Define options for the YouTube player\n//     height: \"390\", // Set player height\n//     width: \"840\", // Set player width\n//     playerVars: { // YouTube player parameters\n//       autoplay: 1, // Enable autoplay for the video\n//     },\n//   };\n\n//   const styles = { // Define styles for the modal\n//     position: \"fixed\", // Fixed position for the modal\n//     right: \"0\", // Align to the right\n//     bottom: \"0\", // Align to the bottom\n//     top: \"20%\", // Set top position\n//     left: \"23%\", // Set left position\n//   };\n\n//   const fetchVideo = async () => { // Function to fetch video data from API\n//     const { data } = await axios.get( // Make GET request to fetch video data\n//       `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n//     );\n//     console.log(data); // Log fetched data for debugging\n//     setVideoId(data?.results[0]?.key); // Set the video ID from the API response\n//   };\n\n//   useEffect(() => { // Effect to fetch video when component mounts\n//     fetchVideo(); // Call the fetchVideo function\n//   }, []); // Empty dependency array means it runs once when the component mounts\n\n//   useEffect(() => { // Effect to handle focus and keyboard navigation\n//     // Focus the close button when the modal opens\n//     if (closeButtonRef.current) { // Check if close button ref is set\n//       closeButtonRef.current.focus(); // Focus the close button\n//     }\n\n//     const handleKeyDown = (event) => { // Function to handle keydown events\n//       if (event.key === \"Escape\") { // Check if Escape key is pressed\n//         onClose(); // Call onClose function to close the modal\n//       }\n\n//       // Prevent focus from moving away from the close button\n//       if (event.key === \"Tab\") { // Check if Tab key is pressed\n//         event.preventDefault(); // Prevent the default Tab behavior\n//       }\n//     };\n\n//     window.addEventListener(\"keydown\", handleKeyDown); // Attach keydown event listener to the window\n//     return () => { // Cleanup function\n//       window.removeEventListener(\"keydown\", handleKeyDown); // Remove event listener on unmount\n//     };\n//   }, [onClose]); // Dependency on onClose function\n\n//   return ( // Render the component\n//     <div> {/* Modal container */}\n//       <button ref={closeButtonRef} onClick={onClose} tabIndex=\"0\">Close</button> {/* Close Button */}\n//       <YouTube \n//         videoId={videoId} // Pass video ID to YouTube component\n//         opts={opts} // Pass options for the YouTube player\n//         style={styles} // Apply styles to the YouTube component\n//       />\n//     </div>\n//   );\n// };\n\n// export default ModalContent; // Export the ModalContent component\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO,CAAC,CAAC;AAC5D,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAMY,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACrC,MAAMW,OAAO,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9B,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,cAAA;IAAE;IAC/B,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMb,KAAK,CAACc,GAAG,CAC7B,sCAAqCV,EAAG,mBAAkBW,OAAO,CAACC,GAAG,CAACC,mBAAoB,EAAC,CAAC;IAC/F,CAAC;;IACDT,UAAU,CAACK,IAAI,aAAJA,IAAI,wBAAAD,cAAA,GAAJC,IAAI,CAAEK,OAAO,CAAC,CAAC,CAAC,cAAAN,cAAA,uBAAhBA,cAAA,CAAkBO,GAAG,CAAC,CAAC,CAAC;EACrC,CAAC;;EAEDrB,SAAS,CAAC,MAAM;IAAE;IAChBa,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERb,SAAS,CAAC,MAAM;IACd,MAAMsB,iBAAiB,GAAGV,OAAO,CAACW,OAAO,CAACC,gBAAgB,CAAC,wDAAwD,CAAC;IACpH,MAAMC,YAAY,GAAGH,iBAAiB,CAAC,CAAC,CAAC;IACzC,MAAMI,WAAW,GAAGJ,iBAAiB,CAACA,iBAAiB,CAACK,MAAM,GAAG,CAAC,CAAC;IAEnE,MAAMC,SAAS,GAAIC,KAAK,IAAK;MAC3B,IAAIA,KAAK,CAACR,GAAG,KAAK,KAAK,EAAE;QACvB,IAAIQ,KAAK,CAACC,QAAQ,EAAE;UAAE;UACpB,IAAIC,QAAQ,CAACC,aAAa,KAAKP,YAAY,EAAE;YAC3CI,KAAK,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC;YACxBP,WAAW,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;UACvB;QACF,CAAC,MAAM;UAAE;UACP,IAAIH,QAAQ,CAACC,aAAa,KAAKN,WAAW,EAAE;YAC1CG,KAAK,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC;YACxBR,YAAY,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;UACxB;QACF;MACF;IACF,CAAC;;IAED;IACA,IAAItB,OAAO,CAACW,OAAO,EAAE;MACnBX,OAAO,CAACW,OAAO,CAACY,gBAAgB,CAAC,SAAS,EAAEP,SAAS,CAAC;IACxD;;IAEA;IACAjB,cAAc,CAACY,OAAO,CAACW,KAAK,CAAC,CAAC;;IAE9B;IACA,OAAO,MAAM;MACX,IAAItB,OAAO,CAACW,OAAO,EAAE;QACnBX,OAAO,CAACW,OAAO,CAACa,mBAAmB,CAAC,SAAS,EAAER,SAAS,CAAC;MAC3D;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN;IAAA;IAAS;IACPxB,OAAA;MAAKiC,GAAG,EAAEzB,OAAQ;MAAC0B,QAAQ,EAAC,IAAI;MAACC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAC,QAAA,gBAC1DrC,OAAA;QACEsC,KAAK,EAAC,KAAK,CAAC;QAAA;QACZC,MAAM,EAAC,KAAK,CAAC;QAAA;QACbC,GAAG,EAAG,iCAAgCnC,OAAQ,aAAa,CAAC;QAAA;QAC5DoC,KAAK,EAAC,eAAe,CAAC;QAAA;;QAEtBC,KAAK,EAAC,2BAA2B,CAAC;QAAA;QAClCC,eAAe,OAAC;QAAA;QAChBT,QAAQ,EAAC,GAAG,CAAC;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAEV/C,OAAA;QAAQiC,GAAG,EAAE1B,cAAe;QAACyC,OAAO,EAAE7C,OAAQ;QAAAkC,QAAA,EAAC;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D;EAAC;AAEV,CAAC;AAAC3C,EAAA,CArEIH,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AAuElB,eAAeA,YAAY;;AAE1B;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}