{"ast":null,"code":"var _jsxFileName = \"/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\nimport YouTube from \"react-youtube\"; // Import YouTube component for video playback\nimport axios from \"axios\"; // Import axios for making HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = ({\n  id,\n  onClose\n}) => {\n  _s();\n  // Define ModalContent component with props\n  const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n  const closeButtonRef = useRef(null); // Create a ref for the close button\n\n  const opts = {\n    // Define options for the YouTube player\n    height: \"390\",\n    // Set player height\n    width: \"840\",\n    // Set player width\n    playerVars: {\n      // YouTube player parameters\n      autoplay: 1 // Enable autoplay for the video\n    }\n  };\n\n  const styles = {\n    // Define styles for the modal\n    position: \"fixed\",\n    // Fixed position for the modal\n    right: \"0\",\n    // Align to the right\n    bottom: \"0\",\n    // Align to the bottom\n    top: \"20%\",\n    // Set top position\n    left: \"23%\" // Set left position\n  };\n\n  const fetchVideo = async () => {\n    var _data$results$;\n    // Function to fetch video data from API\n    const {\n      data\n    } = await axios.get(\n    // Make GET request to fetch video data\n    `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n    );\n\n    console.log(data); // Log fetched data for debugging\n    setVideoId(data === null || data === void 0 ? void 0 : (_data$results$ = data.results[0]) === null || _data$results$ === void 0 ? void 0 : _data$results$.key); // Set the video ID from the API response\n  };\n\n  useEffect(() => {\n    // Effect to fetch video when component mounts\n    fetchVideo(); // Call the fetchVideo function\n  }, []); // Empty dependency array means it runs once when the component mounts\n\n  useEffect(() => {\n    // Effect to handle focus and keyboard navigation\n    // Focus the close button when the modal opens\n    if (closeButtonRef.current) {\n      // Check if close button ref is set\n      closeButtonRef.current.focus(); // Focus the close button\n    }\n\n    const handleKeyDown = event => {\n      // Function to handle keydown events\n      if (event.key === \"Escape\") {\n        // Check if Escape key is pressed\n        onClose(); // Call onClose function to close the modal\n      }\n\n      // Prevent focus from moving away from the close button\n      if (event.key === \"Tab\") {\n        // Check if Tab key is pressed\n        event.preventDefault(); // Prevent the default Tab behavior\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown); // Attach keydown event listener to the window\n    return () => {\n      // Cleanup function\n      window.removeEventListener(\"keydown\", handleKeyDown); // Remove event listener on unmount\n    };\n  }, [onClose]); // Dependency on onClose function\n\n  return (\n    /*#__PURE__*/\n    // Render the component\n    _jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: closeButtonRef,\n        onClick: onClose,\n        tabIndex: \"0\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: videoId // Pass video ID to YouTube component\n        ,\n        opts: opts // Pass options for the YouTube player\n        ,\n        style: styles // Apply styles to the YouTube component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ModalContent, \"kr4qtd8+ynU2Sd0VjRrnTH1tEyk=\");\n_c = ModalContent;\nexport default ModalContent; // Export the ModalContent component\nvar _c;\n$RefreshReg$(_c, \"ModalContent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YouTube","axios","jsxDEV","_jsxDEV","ModalContent","id","onClose","_s","videoId","setVideoId","closeButtonRef","opts","height","width","playerVars","autoplay","styles","position","right","bottom","top","left","fetchVideo","_data$results$","data","get","process","env","REACT_APP_MOVIE_KEY","console","log","results","key","current","focus","handleKeyDown","event","preventDefault","window","addEventListener","removeEventListener","children","ref","onClick","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["/Users/lindseykeller/Desktop/tmbd-app/src/components/ModalContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"; // Import React and necessary hooks\nimport YouTube from \"react-youtube\"; // Import YouTube component for video playback\nimport axios from \"axios\"; // Import axios for making HTTP requests\n\nconst ModalContent = ({ id, onClose }) => { // Define ModalContent component with props\n  const [videoId, setVideoId] = useState(\"\"); // State for storing the YouTube video ID\n  const closeButtonRef = useRef(null); // Create a ref for the close button\n\n  const opts = { // Define options for the YouTube player\n    height: \"390\", // Set player height\n    width: \"840\", // Set player width\n    playerVars: { // YouTube player parameters\n      autoplay: 1, // Enable autoplay for the video\n    },\n  };\n\n  const styles = { // Define styles for the modal\n    position: \"fixed\", // Fixed position for the modal\n    right: \"0\", // Align to the right\n    bottom: \"0\", // Align to the bottom\n    top: \"20%\", // Set top position\n    left: \"23%\", // Set left position\n  };\n\n  const fetchVideo = async () => { // Function to fetch video data from API\n    const { data } = await axios.get( // Make GET request to fetch video data\n      `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${process.env.REACT_APP_MOVIE_KEY}` // Construct API URL with movie ID and API key\n    );\n    console.log(data); // Log fetched data for debugging\n    setVideoId(data?.results[0]?.key); // Set the video ID from the API response\n  };\n\n  useEffect(() => { // Effect to fetch video when component mounts\n    fetchVideo(); // Call the fetchVideo function\n  }, []); // Empty dependency array means it runs once when the component mounts\n\n  useEffect(() => { // Effect to handle focus and keyboard navigation\n    // Focus the close button when the modal opens\n    if (closeButtonRef.current) { // Check if close button ref is set\n      closeButtonRef.current.focus(); // Focus the close button\n    }\n\n    const handleKeyDown = (event) => { // Function to handle keydown events\n      if (event.key === \"Escape\") { // Check if Escape key is pressed\n        onClose(); // Call onClose function to close the modal\n      }\n\n      // Prevent focus from moving away from the close button\n      if (event.key === \"Tab\") { // Check if Tab key is pressed\n        event.preventDefault(); // Prevent the default Tab behavior\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown); // Attach keydown event listener to the window\n    return () => { // Cleanup function\n      window.removeEventListener(\"keydown\", handleKeyDown); // Remove event listener on unmount\n    };\n  }, [onClose]); // Dependency on onClose function\n\n  return ( // Render the component\n    <div> {/* Modal container */}\n      <button ref={closeButtonRef} onClick={onClose} tabIndex=\"0\">Close</button> {/* Close Button */}\n      <YouTube \n        videoId={videoId} // Pass video ID to YouTube component\n        opts={opts} // Pass options for the YouTube player\n        style={styles} // Apply styles to the YouTube component\n      />\n    </div>\n  );\n};\n\nexport default ModalContent; // Export the ModalContent component\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}